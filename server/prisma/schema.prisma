// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  first_name String
  last_name  String
  email      String    @unique
  password   Password?
  posts      Post[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int    @unique
}

model Post {
  id              Int           @id @unique @default(autoincrement())
  author          User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId        Int
  restaurant      Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId    Int
  burger          Burger        @relation(fields: [burgerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  burgerId        Int
  burgerPicture   burgerPicture @relation(fields: [burgerPictureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  burgerPictureId Int           @unique
  content         String?
  burgerRating    Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Restaurant {
  id             Int      @id @default(autoincrement())
  restaurantName String   @unique
  burgers        Burger[]
  posts          Post[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Burger {
  id           Int             @id @unique @default(autoincrement())
  burgerName   String          @unique
  restaurant   Restaurant      @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId Int
  pictures     burgerPicture[]
  posts        Post[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model burgerPicture {
  id            Int     @id @unique @default(autoincrement())
  burgerPicture String? @unique
  burger        Burger  @relation(fields: [burgerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  burgerId      Int 
  post          Post?
}