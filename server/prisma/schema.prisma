// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  first_name String
  last_name  String
  email      String    @unique
  profile    Profile?
  password   Password?
  posts      Post[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int    @unique
}

model Profile {
  profilePicture String?
  location       String?
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int  @unique
}

model Post {
  id           Int            @id @default(autoincrement())
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId     Int
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId Int
  burger       Burger         @relation(fields: [burgerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  burgerId     Int
  burgerPic    burgerPicture? @relation(fields: [burgerPicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  burgerPicId  Int            @unique
  content      String?
  burgerRating Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Restaurant {
  id             Int      @id @default(autoincrement())
  restaurantName String   @unique
  burgers        Burger[]
  posts          Post[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Burger {
  id                  Int             @id @unique @default(autoincrement())
  burgerName          String
  relatedRestaurant   Restaurant      @relation(fields: [relatedRestaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  relatedRestaurantId Int
  pictures            burgerPicture[]
  posts               Post[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model burgerPicture {
  id              Int     @id @unique @default(autoincrement())
  burgerPicture   String?
  relatedBurger   Burger  @relation(fields: [relatedBurgerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  relatedBurgerId Int
  post            Post?
}
